// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenPaymentMock.Server.Persistance;

#nullable disable

namespace OpenPaymentMock.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("OpenPaymentMock.Model.Entities.PartnerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("OpenPaymentMock.Model.Entities.PaymentAttemptEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentError")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PaymentSituationId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PaymentSituationId");

                    b.ToTable("PaymentAttempts");
                });

            modelBuilder.Entity("OpenPaymentMock.Model.Entities.PaymentSituationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CallbackUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Timeout")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("PaymentSituations");
                });

            modelBuilder.Entity("OpenPaymentMock.Model.Entities.PaymentAttemptEntity", b =>
                {
                    b.HasOne("OpenPaymentMock.Model.Entities.PaymentSituationEntity", "PaymentSituation")
                        .WithMany("PaymentAttempts")
                        .HasForeignKey("PaymentSituationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentSituation");
                });

            modelBuilder.Entity("OpenPaymentMock.Model.Entities.PaymentSituationEntity", b =>
                {
                    b.HasOne("OpenPaymentMock.Model.Entities.PartnerEntity", "Partner")
                        .WithMany("PaymentSituations")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("OpenPaymentMock.Model.Entities.PartnerEntity", b =>
                {
                    b.Navigation("PaymentSituations");
                });

            modelBuilder.Entity("OpenPaymentMock.Model.Entities.PaymentSituationEntity", b =>
                {
                    b.Navigation("PaymentAttempts");
                });
#pragma warning restore 612, 618
        }
    }
}
