// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenPaymentMock.Server.Persistance;

#nullable disable

namespace OpenPaymentMock.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250108211421_PaymentTimeoutCalculation")]
    partial class PaymentTimeoutCalculation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("OpenPaymentMock.Model.Entities.PartnerAccessKeyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("LastUsed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("TEXT");

                    b.Property<long>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PartnerId");

                    b.ToTable("PartnerAccessKeys");
                });

            modelBuilder.Entity("OpenPaymentMock.Model.Entities.PartnerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("OpenPaymentMock.Model.Entities.PaymentAttemptEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("FinishedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentError")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PaymentSituationId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("TimeoutAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PaymentSituationId");

                    b.ToTable("PaymentAttempts");
                });

            modelBuilder.Entity("OpenPaymentMock.Model.Entities.PaymentCallbackEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CallbackUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LatestResponse")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("LatestResponseAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PaymentSituationId")
                        .HasColumnType("TEXT");

                    b.Property<int>("RetryCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PaymentSituationId");

                    b.ToTable("Callbacks");
                });

            modelBuilder.Entity("OpenPaymentMock.Model.Entities.PaymentSituationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CallbackUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("FinishedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RedirectUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Secret")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("TimeoutAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("PaymentSituations");
                });

            modelBuilder.Entity("OpenPaymentMock.Model.Entities.PartnerAccessKeyEntity", b =>
                {
                    b.HasOne("OpenPaymentMock.Model.Entities.PartnerEntity", "Partner")
                        .WithMany("AccessKeys")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("OpenPaymentMock.Model.Entities.PaymentAttemptEntity", b =>
                {
                    b.HasOne("OpenPaymentMock.Model.Entities.PaymentSituationEntity", "PaymentSituation")
                        .WithMany("PaymentAttempts")
                        .HasForeignKey("PaymentSituationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentSituation");
                });

            modelBuilder.Entity("OpenPaymentMock.Model.Entities.PaymentCallbackEntity", b =>
                {
                    b.HasOne("OpenPaymentMock.Model.Entities.PaymentSituationEntity", "PaymentSituation")
                        .WithMany("Callbacks")
                        .HasForeignKey("PaymentSituationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentSituation");
                });

            modelBuilder.Entity("OpenPaymentMock.Model.Entities.PaymentSituationEntity", b =>
                {
                    b.HasOne("OpenPaymentMock.Model.Entities.PartnerEntity", "Partner")
                        .WithMany("PaymentSituations")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("OpenPaymentMock.Model.Options.PaymentOptions", "PaymentOptions", b1 =>
                        {
                            b1.Property<Guid>("PaymentSituationEntityId")
                                .HasColumnType("TEXT");

                            b1.Property<bool>("AllowInvalidCards")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("GenerateRandomCardDetails")
                                .HasColumnType("INTEGER");

                            b1.HasKey("PaymentSituationEntityId");

                            b1.ToTable("PaymentSituations");

                            b1.ToJson("PaymentOptions");

                            b1.WithOwner()
                                .HasForeignKey("PaymentSituationEntityId");
                        });

                    b.Navigation("Partner");

                    b.Navigation("PaymentOptions")
                        .IsRequired();
                });

            modelBuilder.Entity("OpenPaymentMock.Model.Entities.PartnerEntity", b =>
                {
                    b.Navigation("AccessKeys");

                    b.Navigation("PaymentSituations");
                });

            modelBuilder.Entity("OpenPaymentMock.Model.Entities.PaymentSituationEntity", b =>
                {
                    b.Navigation("Callbacks");

                    b.Navigation("PaymentAttempts");
                });
#pragma warning restore 612, 618
        }
    }
}
